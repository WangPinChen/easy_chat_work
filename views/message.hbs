<style>
  h1 {
    font-size: 1.5rem;
  }

  .title-container {
    padding: 0.5rem;
    border-bottom: 1px solid #cfdae3;
    width: 100%;
  }

  .body-container {
    display: flex;
  }

  main {
    display: flex;
    width: 100%;
    margin-left: 160px;
    border-left: 1px solid #cfdae3;
    border-right: 1px solid #cfdae3;
  }

  .online-user-container {
    width: 30%;
    border-right: 1px solid #cfdae3;
    height: 100vh;
    overflow-y: auto;
  }

  .online-user-container .card {
    width: 100%;
    display: flex;
    padding: 0.5rem 0;
    border-bottom: 4px solid #018ffd;
  }

  .online-user-container .avatar-container {
    width: 30%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .online-user-container .avatar-container img {
    width: 90%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 15px;
  }

  .online-user-container .name-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .online-user-container .name-container .name {
    font-size: 1.25rem;
    color: black;
  }

  .online-user-container .name-container .account {
    color: #83898e;
  }

  .chat-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
  }

  .chat-container .chat-message-group {
    flex: 1;
    overflow-y: scroll;
    padding: 0.25rem 0;
  }

  .chat-container .chat-message-left,
  .chat-container .chat-message-right {
    width: 100%;
  }

  .chat-container .chat-message-left {
    display: flex;
    align-items: start;
  }

  .chat-container .chat-message-left .avatar-container {
    width: 55px;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(to bottom right, #018ffd, white);
    border-radius: 15%;
    margin: 0.125rem;
  }

  .chat-container .chat-message-left .avatar-container img {
    width: 90%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 15%;
    border: 2px solid white;
  }

  .chat-container .chat-message-left .messages {
    max-width: 40%;
  }

  .chat-container .chat-message-left .nameMessage {
    margin-top: 0.75rem;
    margin-left: 0.5rem;
    background-color: rgb(1, 143, 253, 0.3);
    padding: 0 1rem 0.5rem 1rem;
    border-radius: 0 15px 15px 15px;
  }

  .chat-container .chat-message-left .name {
    overflow-wrap: break-word;
    font-size: 1.2rem;
    color: white;
  }

  .chat-container .chat-message-left .message {
    overflow-wrap: break-word;
  }

  .chat-container .chat-message-right {
    display: flex;
    justify-content: end;
  }

  .chat-container .chat-message-right .messages {
    max-width: 40%;
  }

  .chat-container .chat-message-right .message {
    margin-top: 0.75rem;
    margin-right: 0.5rem;
    background-color: rgb(1, 143, 253, 0.3);
    border-radius: 15px 15px 0 15px;
    padding: 0.5rem 1rem;
  }

  .input-container {
    border-top: 1px solid #cfdae3;
    width: 100%;
    padding: 1rem;
  }

  .input-container textarea {
    width: 100%;
    font-size: 1.25rem;
    resize: none;
  }
</style>

<div class="body-container">
  {{> sidebar}}
  <main>

    <div class="online-user-container">
      <div class="title-container">
        <h1>在線使用者</h1>
      </div>
      <div class="card-group">
        {{!-- 上線使用者產生處 --}}
      </div>
    </div>

    <div class="chat-container">
      <div class="title-container">
        <h1>公開聊天室</h1>
      </div>
      <div class="chat-message-group">
        {{!-- 訊息產生處 --}}
      </div>
      <div class="input-container">
        <textarea rows="1"></textarea>
      </div>
    </div>

  </main>
</div>

<script>
  (async () => {
    const socket = io()
    const input = document.querySelector('.input-container textarea')
    const chatMessageGroup = document.querySelector('.chat-message-group')
    const currentUserRes = await axios.get('api/user')
    const currentUser = currentUserRes.data.user

    //捲動scrollbar到最底部
    chatMessageGroup.scrollTop = chatMessageGroup.scrollHeight
    socket.emit('online_user', currentUser)

    socket.on('online_user', user => {
      const cardGroup = document.querySelector('.card-group')
      cardGroup.innerHTML += `
        <div class="card">
          <div class="avatar-container">
            <img class="avatar" src="${user.avatar}" alt="">
          </div>
          <div class="name-container">
            <a href="" class="name">${user.name}</a>
            <p class="account">@${user.account}</p>
          </div>
        </div>
      `
    })
    //公開聊天訊息發送至後端
    input.addEventListener('keyup', (e) => {
      if (e.key === 'Enter') {
        socket.emit('public_message', {
          user: currentUser,
          message: input.value
        })
        input.value = ''
      }
    });
    //接收後端公開聊天訊息
    socket.on('public_message', (msgObj) => {
      //判斷訊息是否是自己，如果是自己產生chat-message-right
      if (msgObj.user.id === currentUser.id) {
        chatMessageGroup.innerHTML += `
        <div class="chat-message-right">
          <div class="messages">
            <div class="message">
              ${msgObj.message}
            </div>
          </div>
        </div>
        `
        return chatMessageGroup.scrollTop = chatMessageGroup.scrollHeight
      }
      //判斷訊息發送者是否和上一個發送者相同，如果相同，訊息隱藏頭貼+姓名
      if (chatMessageGroup.lastElementChild) {
        if (chatMessageGroup.lastElementChild.classList.contains(`user-id-${msgObj.user.id}`)) {
          chatMessageGroup.innerHTML += `
        <div class="chat-message-left user-id-${msgObj.user.id}">
          <div class="avatar-container" style="visibility:hidden;height:0" >
            <img src="https://i.imgur.com/o1a4kLI.png" alt="">
          </div>
          <div class="messages">
            <div class="nameMessage">
              <div class="name" style="display:none;">
                user.name :
              </div>
              <div class="message">
                ${msgObj.message}
              </div>
            </div>
          </div>
        </div>
         `
          return chatMessageGroup.scrollTop = chatMessageGroup.scrollHeight
        }
      }
      //如果訊息來自於別的使用者，產生chat-message-left
      chatMessageGroup.innerHTML += `
        <div class="chat-message-left user-id-${msgObj.user.id}">
          <div class="avatar-container">
            <img src="${msgObj.user.avatar}" alt="">
          </div>
          <div class="messages">
            <div class="nameMessage">
              <div class="name" >
                ${msgObj.user.name}:
              </div>
              <div class="message">
                ${msgObj.message}
              </div>
            </div>
          </div>
        </div>
    `
      //捲動scrollbar到最底部
      chatMessageGroup.scrollTop = chatMessageGroup.scrollHeight
    })
  })()
</script>