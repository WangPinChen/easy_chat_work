<style>
  .sidebar {
    border-right: 1px solid #cfdae3;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100vh;
    background-color: white;
    position: fixed;
    z-index: 999;
  }

  .log-container img {
    width: 150px
  }

  .sidebar-ul {
    height: 100%;
  }

  .sidebar-ul li {
    color: #83898e;
    font-size: 1.25rem;
    margin: 0.25rem 0.5rem;
    padding: 0.75rem;
    border-radius: 15px;
    display: flex;
    align-items: center;
  }

  .sidebar-ul li:hover {
    background-color: #018ffd;
    color: white;
  }

  .sidebar-ul li i {
    margin-right: 0.75rem;
  }

  #logout-toggle-input {
    display: none;
  }

  .logout-container button {
    width: 100%;
    margin: 0.25rem 0;
    font-size: 1.125rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logout-container .sub-form {
    display: none;
  }

  .logout-toggle-label {
    display: none;
  }

  @media screen and (max-width:1280px) {
    .log-container img {
      width: 75px
    }

    .sidebar-ul li {
      justify-content: center;
    }

    .sidebar-ul li i {
      font-size: 1.5rem;
      margin: 0;
      position: relative;
    }

    .sidebar-ul li p {
      display: none;
    }

    .logout-container i {
      display: none;
    }

    .notify-icon {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: red;
      position: absolute;
      right: 0;
      top: 0;
      border: 1px solid white;
    }
  }

  @media screen and (max-width:768px) {
    .sidebar {
      height: 75px;
      width: 100%;
      flex-direction: row;
      justify-content: center;
      align-self: center;
      position: fixed;
      bottom: 0;
      border-top: 1px solid #cfdae3;
      background-color: rgb(255, 255, 255, 0.85);
    }


    .log-container {
      display: none;
    }

    .sidebar-ul {
      display: flex;
      width: 100%;
      justify-content: space-around;
    }

    .logout-container {
      position: absolute;
      top: -50px;
      right: 5px;
      width: 125px;
      transform: translate(140px);
      transition: 0.5s ease;
    }

    #logout-toggle-input:checked+.logout-container {
      transform: translate(0);
    }

    .logout-toggle-label {
      color: #83898e;
      display: block;
      cursor: pointer;
      font-weight: 600;
      font-size: 1.5rem;
      margin-right: 0.2rem;
    }

  }
</style>

<section class="sidebar">
  <div class="log-container">
    <a href="/">
      <img src="/images/LOGO.png" alt="">
    </a>
  </div>

  <ul class="sidebar-ul">
    <a href="/">
      <li>
        <i class="fa-solid fa-house"></i>
        <p>
          首頁
        </p>
      </li>
    </a>
    <a href="/explore">
      <li>
        <i class="fa-solid fa-compass"></i>
        <p>
          探索
        </p>
      </li>
    </a>
    <a href="/message">
      <li>
        <i class="fa-solid fa-bullhorn"></i>
        <p>
          公開聊天
        </p>
      </li>
    </a>
    <a class="" href="/message/private">
      <li class="private-message-li">
        <i class="fa-solid fa-comments">
          {{!-- <div class="notify-icon"></div> --}}
        </i>
        <p>
          私人聊天
        </p>
      </li>
    </a>
  </ul>


  <input type="checkbox" id="logout-toggle-input">
  <div class="logout-container">
    <form class="main-form" action="/logout" method="post">
      <button>
        <i class="fa-solid fa-right-from-bracket"></i>
        <p>登出</p>
      </button>
    </form>
  </div>
  <label class="logout-toggle-label" for="logout-toggle-input">...</label>

</section>

<script>
  (async () => {
    const socket = io()
    const currentUserRes = await axios.get('/api/user')
    const currentUser = currentUserRes.data.user
    const checkUnreadMsgRes = await axios.get(`/api/user/${currentUser.id}/unread_message`)
    if (!checkUnreadMsgRes.data.isRead) {
      const privateIcon = document.querySelector('.private-message-li i')
      const notifyIcon = document.createElement('div')
      notifyIcon.className = 'notify-icon'
      privateIcon.appendChild(notifyIcon)
    }

    socket.on(`${currentUser.id}`, msgObj => {
      const privateNotifyIcon = document.querySelector('.private-message-li i .notify-icon')
      if (msgObj.type = 'privateMessage' && privateNotifyIcon === null) {
        const privateIcon = document.querySelector('.private-message-li i')
        const notifyIcon = document.createElement('div')
        notifyIcon.className = 'notify-icon'
        privateIcon.appendChild(notifyIcon)
      }
    })
  })()
</script>