<style>
  a {
    color: black;
  }

  a:hover {
    color: black;
  }

  .body-container {
    display: flex;
    max-width: 100vw;
  }

  main {
    display: flex;
    width: 100%;
    margin-left: 160px;
    border-left: 1px solid #cfdae3;
    border-right: 1px solid #cfdae3;
  }

  .user-toggle-label {
    display: none;
  }

  .user-container {
    width: 20%;
    border-right: 1px solid #cfdae3;
    height: 100vh;
    overflow-y: auto;
  }

  .user-container .card-group {
    width: 100%;
  }

  .user-container .card-group .card {
    width: 100%;
    display: flex;
    align-items: center;
    padding-bottom: 0.2rem;
    border-bottom: 1px solid #cfdae3;
    position: relative;
  }

  .user-container .card-group .card:hover {
    background-color: rgb(0, 0, 0, 0.015);
  }

  .user-container .card-group .card .avatar-container {
    min-width: 50px;
    width: 30%;
    max-width: 85px;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 15px;
    background: linear-gradient(to bottom right, #018ffd, white);
    margin: 0 0.2rem;
  }

  .user-container .card-group .card .avatar-container img {
    width: 90%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 15px;
    border: 2px solid white;
  }

  .user-container .card-group .card .nameAccount {
    width: 70%;
    white-space: nowrap;
    overflow: hidden;
    margin-right: 0.2rem;
  }

  .user-container .card-group .card .nameAccount .name {
    font-size: 1.25rem;
  }

  .user-container .card-group .card .nameAccount .account {
    font-size: 1rem;
    color: #83898e;
  }

  .user-container .card-group .card .notify-icon {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: red;
    position: absolute;
    text-align: center;
    color: white;
    top: 2%;
    right: 2%;
    font-size: 0.8rem;
  }

  .chat-contaier {
    width: 80%;
    display: flex;
    flex-direction: column;
    height: 100vh;
  }

  .chat-contaier .chat-title {
    border-bottom: 1px solid #cfdae3;
    display: flex;
    align-items: center;
    padding: 0.2rem 3rem;
  }

  .chat-contaier .chat-title a {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .chat-contaier .chat-title .avatar-container {
    width: 5%;
    min-width: 50px;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 15px;
    background: linear-gradient(to bottom right, #018ffd, white);
    margin: 0 0.2rem;
  }

  .chat-contaier .chat-title .avatar-container img {
    width: 90%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 15px;
    border: 2px solid white;
  }

  .chat-contaier .chat-title .name {
    font-size: 1.5rem;
  }

  .chat-contaier .message-group {
    width: 100%;
    flex: 1;
    overflow-y: scroll;
    padding: 0.25rem 0;
  }

  .chat-contaier .message-group .chat-message-left,
  .chat-contaier .message-group .chat-message-right,
  .chat-contaier .message-group .system-message {}

  .chat-contaier .message-group .chat-message-left .message,
  .chat-contaier .message-group .chat-message-right .message,
  .chat-contaier .message-group .system-message .message {
    max-width: 40%;
    overflow-wrap: break-word;
    margin-top: 0.75rem;
    margin-left: 0.5rem;
    margin-right: 0.5rem;
    margin-bottom: 0.3rem;
  }

  .chat-contaier .message-group .system-message {
    margin: 0.25rem auto;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgb(1, 143, 253, 0.2);
  }

  .chat-contaier .message-group .system-message .message {
    margin: 0.25rem 0;
  }

  .chat-contaier .message-group .chat-message-left {
    display: flex;
    align-items: flex-start;
  }

  .chat-contaier .message-group .chat-message-left .avatar-container {
    width: 55px;
    aspect-ratio: 1/1;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(to bottom right, #018ffd, white);
    border-radius: 15%;
    margin: 0.125rem;
  }

  .chat-contaier .message-group .chat-message-left .avatar-container img {
    width: 90%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 15%;
    border: 2px solid white;
  }

  .chat-contaier .message-group .chat-message-left .message {
    background-color: rgb(1, 143, 253, 0.3);
    padding: 0 1rem 0.5rem 1rem;
    border-radius: 0 15px 15px 15px;
  }

  .chat-contaier .message-group .chat-message-right {
    display: flex;
    justify-content: end;
  }

  .chat-contaier .message-group .chat-message-right .message {
    background-color: rgb(1, 143, 253, 0.3);
    padding: 0 1rem 0.5rem 1rem;
    border-radius: 15px 0 15px 15px;
  }

  .input-container {
    border-top: 1px solid #cfdae3;
    width: 100%;
    padding: 1rem;
  }

  .input-container textarea {
    width: 100%;
    font-size: 1.25rem;
    resize: none;
  }

  @media screen and (max-width:1280px) {
    main {
      margin-left: 82px;
      margin: 0 auto;
      padding-left: 82px;
    }
  }

  @media screen and (max-width:768px) {
    main {
      padding: 0;
    }

    .user-toggle-label {
      display: block;
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 1;
      background-color: rgb(207, 218, 227, 0.2);
      border-radius: 5px;
      padding: 0.25rem 0.5rem;
      cursor: pointer;
      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }

    .user-toggle-label i {
      font-size: 1.75rem;
      color: #018ffd;
      position: relative
    }

    .user-toggle-label i:hover {
      color: rgb(1, 143, 253, 0.7);
    }

    .user-toggle-label i .notify-icon {
      width: 10px;
      height: 10px;
      background-color: red;
      border-radius: 50%;
      position: absolute;
      top: 0;
      right: 0;
      border: 1px solid white;
    }

    .user-toggle-label:hover {
      background-color: rgb(207, 218, 227, 0.5)
    }

    .user-container {
      background-color: white;
      position: absolute;
      padding-top: 60px;
      width: 60vw;
      transition: 0.5s ease;
      transform: translateX(-60vw)
    }

    .user-toggle-input:checked+.user-container {
      transform: translateX(0);
    }

    .user-container .card-group .card .nameAccount .name {
      font-size: 1rem;
    }

    .user-container .card-group .card .nameAccount .account {
      font-size: 0.8rem;
    }

    .chat-contaier {
      width: 100%;
    }

    .chat-contaier .chat-title {
      justify-content: center;
    }

    .chat-contaier .chat-title .name {
      font-size: 1rem;
    }

    .chat-contaier .chat-title .avatar-container {}
  }
</style>

<div class="body-container">
  {{> sidebar}}
  <main>


    <label class="user-toggle-label" for="user-toggle-input">
      <i class="fa-solid fa-comments">
        {{!-- <div class="notify-icon"></div> --}}
      </i>
    </label>
    <input class="user-toggle-input" type="checkbox" name="" id="user-toggle-input" style="display: none;">
    <div class="user-container">
      <div class="card-group">
        {{!-- 產生card的地方 --}}
        {{#each users}}
        <a href="/message/private/{{this.userId}}" class="card user-id-{{this.userId}}">
          <div class="avatar-container">
            <img src="{{this.userAvatar}}" alt="">
          </div>
          <div class="nameAccount">
            <p class="name">{{this.userName}}</p>
            <p class="account">@{{this.userAccount}}</p>
          </div>
          {{#if this.unreadCount}}
          <div class="notify-icon">
            {{this.unreadCount}}
          </div>
          {{/if}}
        </a>
        {{/each}}

        {{!-- render-sample↓ --}}
        {{!-- <a href="#" class="card user-id-xxxx">
          <div class="avatar-container">
            <img src="https://i.imgur.com/1IXoXSK.jpeg" alt="">
          </div>
          <div class="nameAccount">
            <p class="name">cat</p>
            <p class="account">@bad_cat</p>
          </div>
          <div class="notify-icon">
            3
          </div>
        </a> --}}

      </div>
    </div>

    <div class="chat-contaier">
      <div class="chat-title">
        <a href="/user/{{chatUser.id}}">
          <div class="avatar-container">
            <img src="{{chatUser.avatar}}" alt="">
          </div>
          <p class="name">{{chatUser.name}}</p>
        </a>
      </div>
      <div class="message-group">

        {{#each messages}}

        {{!-- <div class="system-message">
          <div class="message">
            未讀訊息
          </div>
        </div> --}}


        {{#if isUserSelf}}
        <div class="chat-message-right user-id-">
          <div class="message">
            {{this.message}}
          </div>
        </div>

        {{else}}
        <div class="chat-message-left user-id-{{this.sender.id}} {{#if isRead}}{{else}}unread {{/if}}"
          data-messageId="{{this.id}}">
          <div class="avatar-container">
            <img src="{{this.sender.avatar}}" alt="">
          </div>
          <div class="message">
            {{this.message}}
          </div>
        </div>
        {{/if}}
        {{/each}}


        {{!-- render-sample↓ --}}
        {{!-- <div class="system-message">
          <div class="message">
            system_message
          </div>
        </div>

        <div class="chat-message-left user-id-XXX unread">
          <div class="avatar-container">
            <img src="https://i.imgur.com/2f3gHqv.jpeg" alt="">
          </div>
          <div class="message">
            hello~
          </div>
        </div>

        <div class="chat-message-right user-id-">
          <div class="message">
            你好~
          </div>
        </div> --}}


      </div>
      <div class="input-container">
        <textarea rows="1"></textarea>
      </div>
    </div>
  </main>
</div>

<script>
  (async () => {
    const socket = io()
    const currentUserRes = await axios.get('/api/user')
    const currentUser = currentUserRes.data.user
    const recipientId = window.location.href.split('/')[window.location.href.split('/').length - 1]
    const cardGroup = document.querySelector('.card-group')

    function createUserCard(obj) {
      const card = document.createElement('a')
      card.classList.add('card', `user-id-${obj.id}`)
      card.href = `/message/private/${obj.id}`
      card.innerHTML = `
        <div class="avatar-container">
          <img src="${obj.avatar}" alt="">
        </div>
        <div class="nameAccount">
          <p class="name">${obj.name}</p>
          <p class="account">@${obj.account}</p>
        </div>
        <div class="notify-icon">
          1
        </div>   
      `
      if (cardGroup.firstChild) {
        cardGroup.insertBefore(card, cardGroup.firstChild)
      } else {
        cardGroup.appendChild(card)
      }
    }
    function reHeightMain() {
      const userContainer = document.querySelector('.user-container')
      const chatContainer = document.querySelector('.chat-contaier')
      const sidebar = document.querySelector('.sidebar')
      const reHeight = window.innerHeight - sidebar.offsetHeight
      if (window.innerWidth < 768) {
        userContainer.style.height = `${reHeight}px`
        chatContainer.style.height = `${reHeight}px`
      }
      if (window.innerWidth > 768) {
        userContainer.style.height = `100vh`
        chatContainer.style.height = `100vh`
      }
    }
    //監聽是否有自己的訊息，並且產生user-card
    socket.on(`${currentUser.id}`, msgObj => {
      if (!cardGroup.querySelector(`.user-id-${msgObj.sender.id}`)) {
        createUserCard(msgObj.sender)
      } else if (cardGroup.querySelector(`.user-id-${msgObj.sender.id}`)) {
        const card = cardGroup.querySelector(`.user-id-${msgObj.sender.id}`)
        if (card.querySelector('.notify-icon')) {
          let unreadMsgCount = Number(card.querySelector('.notify-icon').innerText)
          unreadMsgCount += 1
          card.querySelector('.notify-icon').innerText = unreadMsgCount
        } else {
          const notifyIcon = document.createElement('div')
          notifyIcon.className = 'notify-icon'
          notifyIcon.innerText = 1
          card.appendChild(notifyIcon)
        }
      }
      const notifyIcon = document.createElement('div')
      notifyIcon.classList = 'notify-icon'
      document.querySelector('.user-toggle-label i').appendChild(notifyIcon)
    })

    const fristUread = document.querySelector('.unread')
    const messageGroup = document.querySelector('.message-group')
    const input = document.querySelector('.input-container textarea')
    const readMsgs = []
    //判斷是user group裡面是否有未讀訊息。如果有，將user-toggle-label 加上小紅點
    if (cardGroup.querySelectorAll('.card .notify-icon').length > 0) {
      const notifyIcon = document.createElement('div')
      notifyIcon.className = 'notify-icon'
      document.querySelector('.user-toggle-label i').appendChild(notifyIcon)
    }
    //加入system-message:未讀訊息 並且滑動頁面到指定位置
    if (fristUread) {
      const systemMsg = document.createElement('div')
      systemMsg.classList.add('system-message')
      systemMsg.innerHTML = `
        <div class="message">
          未讀訊息:
        </div>
      `
      messageGroup.insertBefore(systemMsg, fristUread)
      fristUread.scrollIntoView({ behavior: 'smooth' })
      //如果沒有未讀訊息，滑動到最後一筆聊天訊息
    } else if (!fristUread && messageGroup.lastElementChild) {
      messageGroup.lastElementChild.scrollIntoView({ behavior: 'smooth' })
    }
    //**如果路由有id確定進入聊天室窗**
    if (recipientId && recipientId !== 'private') {
      const recipientRes = await axios.get(`/api/user/${recipientId}`)
      const recipient = recipientRes.data.user
      const senderId = currentUser.id.toString()
      const nameSpaceArray = [recipientId, senderId]
      nameSpaceArray.sort((a, b) => { return a - b })
      nameSpaceArray.splice(1, 0, '_')
      const nameSpace = nameSpaceArray.join('')
      //產生聊天對象的user-card
      if (!cardGroup.querySelector(`.user-id-${recipient.id}`)) {
        createUserCard(recipient)
        cardGroup.querySelector(`.user-id-${recipient.id} .notify-icon`).remove()
      }

      //將訊息傳送之後端
      function sendMessage(e) {
        if (e.key === 'Enter' && input.value.trim() !== '') {
          socket.emit('private_message', {
            senderId,
            recipientId,
            nameSpace,
            message: input.value,
            type: 'privateMessage'
          })
          input.value = ''
        }
      }
      //將訊息變成已讀的function
      function readMsg() {
        const scrollTop = messageGroup.scrollTop
        const groupHeight = parseFloat(getComputedStyle(messageGroup).height)
        const messages = messageGroup.querySelectorAll('.unread')

        messages.forEach(message => {
          const distance = message.getBoundingClientRect().bottom - messageGroup.getBoundingClientRect().top
          if (distance < groupHeight) {

            readMsgs.push(message.dataset.messageid)
            message.classList.remove("unread")
            const cardNotify = cardGroup.querySelector('.card .notify-icon')
            cardNotify.innerText = Number(cardNotify.innerText) - 1
            if (Number(cardNotify.innerText) === 0) {
              const notifyIcons = cardGroup.querySelectorAll('.notify-icon')
              unreadMessageCount = 0
              cardNotify.remove()
              for (let i = 0; i < notifyIcons.length; i++) {
                unreadMessageCount += Number(notifyIcons[i].innerText)
              }
              if (unreadMessageCount === 0) {
                document.querySelector('.sidebar .private-message-li .notify-icon').remove()
                document.querySelector('.user-toggle-label i .notify-icon').remove()
              }
            }
          }
        })
      }
      //剛進入頁面時將目前可視範圍的message變成已讀
      readMsg()
      //監聽後端是否有來自xxxx_xxxx的消(xxxx為User id)
      socket.on(nameSpace, msgObj => {
        //判斷訊息是否為自己發送的
        if (msgObj.sender.id.toString() === senderId) {
          messageGroup.innerHTML += `
          <div class="chat-message-right user-id-${msgObj.sender.id}">
            <div class="message">
              ${msgObj.message}
            </div>
          </div>
        `
        }
        //判斷訊息是否為別人發送的
        if (msgObj.sender.id.toString() === recipientId) {
          messageGroup.innerHTML += `
          <div class="chat-message-left user-id-${msgObj.sender.id}">            
            <div class="avatar-container" style="${messageGroup.lastElementChild.classList.contains('chat-message-left') ? `visibility: hidden;height:0;` : ''}">
              <img src="${msgObj.sender.avatar}" alt="">
            </div>
            <div class="message" style="${messageGroup.lastElementChild.classList.contains('chat-message-left') ? `margin-top:0;` : ''}">
              ${msgObj.message}
            </div>
          </div >
        `
        }
        messageGroup.scrollTop = messageGroup.scrollHeight
      })

      input.addEventListener('keyup', sendMessage)
      messageGroup.addEventListener('scroll', readMsg)
      window.addEventListener('beforeunload', () => {
        axios.post('/api/message/read', { messageIds: readMsgs })
      })

    }
    //如果路由沒有id是在主頁
    if (recipientId == 'private') {
      document.querySelector('.chat-contaier .avatar-container').style.display = 'none'
      input.disabled = true
    }
    // 調整在768px之下main底下的元素高度
    reHeightMain()
    window.addEventListener('resize', reHeightMain)
  })()
</script>